let n0 = λf:A -> A. λx:A . x in
let n1 = λf:A -> A. λx:A . f x in
let n2 = λf:A -> A. λx:A . f (f x) in
let n3 = λf:A -> A. λx:A . f (f (f x)) in
let n4 = λf:A -> A. λx:A . f (f (f (f x))) in

let true = λx:A. λy:A . x in
let false = λx:A . λy:A . y in
let then = λx:A -> A. x in
let else = λx:A -> A. x in
let if = λp:(A → B → C). λt:A. λe:B. (p (λx:T. t x)) (λy:E. e y) in

let pair = λa:A -> A -> A . λb:A -> A -> A . λt:A -> A -> A . (t a) b in
let fstt = λp:A -> A -> A. p true in
let sndd = λp:A -> A -> A. p false in 

let succ = λn:A -> A -> A. λx:A -> A. λy:A. x ((n x) y) in
let pred = λn:A -> A -> A. λx:A -> A . λy:A. sndd ( ( n (λp:B . ( pair (x (fstt p)) ) (fstt p) ) ) ( (pair y) y ) ) in
let minus = λn:A -> A -> A. λm:A -> A -> A. (m pred) n in 

let iszero = λn:A -> A -> A. (n (λx:A -> A -> A. false)) true in
let and = λn:A -> A -> A. λm:A -> A -> A. ((if n) m) false in
let eq = λn:A -> A -> A. λm:A -> A -> A. ( and (iszero ( (minus n) m)) ) (iszero ( (minus m) n)) in

let test1 = (eq n3) n2 in
let test2 = (eq n2) n3 in
let test3 = (eq n2) n2 in

let plus = λn:A -> A -> A. λm:A -> A -> A. λx:A -> A. λy:A. (n x) ((m x) y) in

let test4 = (eq n3) ((plus n2) n1) in
let test5 = (eq n3) ((plus n2) n2) in

let mult = λn:A -> A -> A. λm:A -> A -> A. λx:A -> A. λy:A. (n (m x)) y in

let test5 = (eq n2) ((mult n2) n1) in
let test6 = (eq n4) ((mult n2) n2) in

let fact = λf:A->A->A->A. λn:A->A->A. ((if (iszero n)) (λx:X. n1 x)) (λy:Y. ((mult n) (f (pred n))) y) in

let test7 = (eq ((fact (λx:A. x)) n2)) n2 in

let fix = λf:A. (λx:B. f (λy:C. (x x) y )) (λx:B. f (λy:C. (x x) y )) in
let factorial = fix (λx:A. x) in

let test8 = (eq n1) (factorial n0) in test5